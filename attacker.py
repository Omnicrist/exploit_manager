import threading
import db_utils
import requests
import settings


class Attacker(threading.Thread):
    def __init__(self, stngs: settings.Settings,
                 opponent: str, service: str, exploit):  # TODO Type hint?
        super().__init__()
        self.settings = stngs
        self.opponent = opponent
        self.service = service
        self.exploit = exploit

    def get_valid_flags(self, flags: set) -> set:
        new_flags = set()
        for flag in flags:
            connection = db_utils.connect(self.settings.db)
            if not db_utils.check_if_a_flag_is_present_in_db(connection, flag):
                new_flags.add(flag)
            connection.close()
        return new_flags

    def submit_flags(self, flags: set):
        for flag in flags:
            connection = db_utils.connect(self.settings.db)
            self.__submit_flag(flag)
            db_utils.insert_flag_in_db(connection, flag,
                                       self.opponent, self.service)
            connection.close()

    def __submit_flag(self, flag: str):
        data = {'team_token': self.settings.submit_token, 'flag': flag}
        # TODO Try Except
        if self.settings.submit_protocol == "POST":
            r = requests.post(self.settings.submit_url, data=data)
        else:
            r = requests.get(self.settings.submit_url, data=data)
        # TODO check response to see if it was valid or invalid

    def run(self):
        while True:
            print(f"[+] Now attacking target: {self.opponent}")
            flags = self.exploit(
                self.opponent)  # TODO Load function from exploit
            new_flags = self.get_valid_flags(flags)
            self.submit_flags(new_flags)
