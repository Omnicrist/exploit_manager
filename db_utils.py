import sqlite3
import utils
from urllib.request import pathname2url

CREATE_TABLE_FLAGS = """CREATE TABLE IF NOT EXISTS "flags" (
	"flag" TEXT PRIMARY KEY,
	"opponent" TEXT NOT NULL,
	"service" TEXT NOT NULL,
	"timestmp" TEXT NOT NULL
);"""

COUNT_TABLES_NAMED_FLAGS = """ SELECT count(name)
    FROM sqlite_master
    WHERE type = 'table'
    AND name = "flags"
"""

INSERT_A_FLAG_IN_DB = """INSERT INTO "flags" (flag, opponent, service, timestmp)
VALUES(?, ?, ?, ?);
"""

CHECK_IF_A_FLAG_IS_IN_DB = """SELECT EXISTS(
    SELECT flag
    FROM "flags"
    WHERE flag = ?
);
"""

GET_EXPLOIT_FLAGS = """ SELECT flag
    FROM flags
    WHERE service = ?
"""


GET_COUNT_ATTACKS = """ SELECT count(flag), opponent, service
    FROM flags
    GROUP BY opponent, service
    ORDER BY count(flag) desc;
"""


def check_if_a_flag_is_present_in_db(connection, flag) -> bool:
    try:
        cursor = connection.cursor()
        cursor.execute(CHECK_IF_A_FLAG_IS_IN_DB, (flag,))
        return cursor.fetchone()[0] == 1
    except sqlite3.Error as e:
        utils.log_err(f"could not fetch {flag}:\n{e}")
        utils.exit_failure_attacker()


def insert_flag_in_db(connection, flag, opponent, service) -> None:
    try:
        cursor = connection.cursor()
        cursor.execute(INSERT_A_FLAG_IN_DB,
                       (flag, opponent, service, utils.get_timestamp()))
        connection.commit()
    except sqlite3.Error as e:
        utils.log_err(f"could not insert flag:\n{e}")
        utils.exit_failure_attacker()


def check_if_db_exists(db_file=r"./flags.db") -> bool:
    try:
        dburi = f'file:{pathname2url(db_file)}?mode=rw'
        sqlite3.connect(dburi, uri=True)
        return True
    except sqlite3.OperationalError:
        return False


def check_if_flags_table_exists(connection) -> bool:
    try:
        cursor = connection.cursor()
        cursor.execute(COUNT_TABLES_NAMED_FLAGS)
        return cursor.fetchone()[0] == 1
    except sqlite3.Error as e:
        utils.log_err(f"could not check if table exists:\n{e}")
        utils.exit_failure_settings()


def connect(db_file=r"./flags.db") -> sqlite3.Connection:
    try:
        return sqlite3.connect(db_file)
    except sqlite3.Error as e:
        utils.log_err(f"Error during the database connection:\n{e}")
        utils.exit_failure_settings()


def create_table_flags(connection) -> None:
    try:
        connection.cursor().execute(CREATE_TABLE_FLAGS)
        connection.commit()
    except sqlite3.Error as e:
        utils.log_err(f"Could not create table or commit creation:\n{e}")
        utils.exit_failure_settings()


def count_exploit_flags(connection, exploit):
    try:
        cursor = connection.cursor()
        cursor.execute(GET_EXPLOIT_FLAGS, (exploit.name.split(".")[0],))
        s = cursor.fetchall()
        flags = set(s)
        new_flags = flags.difference(exploit.old_flags)
        exploit.old_flags = flags.copy()
        return len(new_flags)
    except sqlite3.Error as e:
        utils.log_err(f"could not get flags from exploit {exploit}:\n{e}")
        utils.exit_failure_settings()


def get_count_attacks(connection) -> list:
    try:
        cursor = connection.cursor()
        cursor.execute(COUNT_TABLES_NAMED_FLAGS)
        return cursor.fetchall()
    except sqlite3.Error as e:
        utils.log_err(f"could not count attaks:\n{e}")
        utils.exit_failure_settings()
