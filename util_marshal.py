import json
import marshal
import base64
import types

# If you have more exploits for the same service, just do: service = service_name + vulnerability


def serialize_submitter(function):
    func_code = marshal.dumps(function.__code__)
    str_like_func = base64.b64encode(func_code).decode('utf-8')
    serial = {"submitter": str_like_func}
    serial = json.dumps(serial)
    return serial


def unserialize_submitter(serial, caller_globals):
    try:
        data = json.loads(serial)
        data['submitter'] = types.FunctionType(marshal.loads(base64.b64decode(data['submitter'])), caller_globals,
                                             "submitter")
        return data
    except ValueError:
        return {}


def serialize_exploit(function, opponents, service):
    func_code = marshal.dumps(function.__code__)
    str_like_func = base64.b64encode(func_code).decode('utf-8')
    serial = {"opponents": opponents, "service": service, "exploit": str_like_func}
    serial = json.dumps(serial)
    return serial


def unserialize_exploit(serial, caller_globals):
    try:
        data = json.loads(serial)
        data['exploit'] = types.FunctionType(marshal.loads(base64.b64decode(data['exploit'])), caller_globals, "exploit")
        return data
    except ValueError:
        # TODO: handle this in the interface
        return {}
