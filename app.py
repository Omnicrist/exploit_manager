#!/usr/bin/env python3
import flask
import json
import db_utils
import utils
import manager
import os
import endpoints
from functools import wraps

app = flask.Flask(__name__)
app.thread_struct = {}


def catchError(func):
    @wraps(func)
    def exceptionLogger(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            utils.log_err("Exception in {}: {} {}".format(func.__name__, e.__class__.__name__, str(e)))
            return flask.redirect('/')

    return exceptionLogger


@app.route('/favicon.ico', methods=["GET"])
@catchError
def favicon():
    return flask.send_from_directory(os.path.join(app.root_path, 'static', 'images'), 'uninap.png', mimetype='image/png')


@app.route('/', methods=['GET'])
def index():
    """HOME DELL'INTERFACCIA"""

    return flask.render_template('/public_html/index.html')


@app.route('/exploits', methods=['GET'])
@catchError
def exploits():
    """PAGINA PER LA GESTIONE DEGLI EXPLOITS
    DA QUI SI PUO' EFFETTUARE L'UPLOAD"""
    
    return flask.render_template('/public_html/upload.html')


@app.route('/api/getExploits', methods=['GET'])
@catchError
def getExploits():
    """RITORNA GLI EXPLOITS E I RELATIVI DATI"""

    # Reading exploits stats from db
    db = db_utils.connect()
    data = db_utils.get_count_attacks(db)
    db.close()

    # Summing the flags obtained by an exploit for each opponent
    totals = dict([(row[1], row[0]) for row in data])
    services = [row[1] for row in data]
    status = [1 if service in app.thread_struct else 0 for service in services]

    response = app.response_class(
        response = json.dumps({"services": services, "totals": totals, "status": status}),
        status = 200,
        mimetype='application/json'
    )
    return response


@app.route('/api/uploadExploit', methods=['POST'])
@catchError
def uploadExploit():
    """UPLOAD DEGLI EXPLOIT"""
    global settings
    
    try:
        f = flask.request.files['myFile']
    except ValueError:
        utils.log_err("POST REQUEST SENZA FILE\n")
        return flask.redirect('/exploits')

    if f.filename == '':
        utils.log_err("EXPLOIT UPLOAD VUOTO\n")
        return flask.redirect('/exploits')

    json_str = json.loads(f.read().decode("utf-8"))
    
    manager.run_exploits(json_str, settings, globals(), app.thread_struct)

    return flask.redirect('/exploits')


@app.route('/api/getTargets', methods=['GET'])
@catchError
def getTargets():
    """RETURN TARGETS DATA"""

    if "service" in flask.request.args.keys():
        service = flask.request.args['service']
        if "targets" in flask.request.args.keys():
            # request of targets data for a given service
            targets = flask.request.args.getlist('targets')
        else:
            # request of all targets data for a given service
            targets = None
        data = endpoints.api_exploit_get_targets_stats(service, targets, app.thread_struct)
        # data = {"targets": [{"name": "Paolo", "flag": 69, "active": 1}, {"name": "Marco", "flag": 420, "active": 0}]}
    else:
        data = {"error": "Invalid parameters"}

    response = app.response_class(
        response = json.dumps(data),
        status = 200,
        mimetype='application/json'
    )
    return response


@app.route('/api/swapState', methods=['GET'])
@catchError
def swapState():
    """SWAP THE STATE OF ONE OR MORE TARGETS FOR A GIVEN SERVICE"""
    
    if "service" in flask.request.args.keys():
        service = flask.request.args['service']
        if "targets" in flask.request.args.keys():
            targets = flask.request.args.getlist("targets")
        else:
            targets = None
        print("SERVICE: {}".format(service)) # DEBUG
        print("TARGETS: {}".format(targets)) # DEBUG
        data = endpoints.api_exploit_switch_state(service, targets, app.thread_struct)
    else:
        data = {"error": "Invalid parameters"}

    response = app.response_class(
        response = json.dumps(data),
        status = 200,
        mimetype='application/json'
    )
    return response


def init():
    global settings
    settings = manager.load_setup(globals())


if __name__ == '__main__':
    init()
    app.run(debug=True)
