#!/usr/bin/env python3
import flask
from werkzeug.utils import secure_filename
import os
import subprocess
import db_utils
import utils
import manager
import attacker
import sqlite3

app = flask.Flask(__name__)
list_exploits = []

class Exploit():
    def __init__(self, name, settings, service):
        self.name = name
        self.opponents = settings.configuration["attack"]["targets"]
        self.successi = 0
        self.fallimenti = 0
        self.attackers = []
        for opponent in self.opponents:
            att = attacker.Attacker(stngs=settings, opponent=opponent, service=service, exploit=name)
            att.start()
            self.attackers.append(att)
        self.old_flags = set()

    def add_successi(self, n) -> None:
        self.successi += n

@app.route('/', methods=['GET'])
def index():
    #
    # HOME DELL'INTERFACCIA
    # DA QUI SI PUO' EFFETTUARE LA REGISTRAZIONE E IL LOGIN
    #

    return flask.render_template('/public_html/index.html')

'''
@app.route('/register', methods=['GET', 'POST'])
def register():
    #
    # REGISTRAZIONE NUOVO UTENTE CON CONTROLLO DI RIGIDITA' DELLA PASSWORD
    #

    if request.method == 'GET':
        return flask.render_template('public_html/register.html')
    
    try:
        user = request.form['user']
        passwd = request.form['passwd']
        passwd_confirm = request.form['passwd_confirm']
        if user == "" or passwd == "" or passwd_confirm == "":
            raise KeyError
    except KeyError:
        return flask.render_template('/public_html/register.html')

    return "REGISTRAZIONE FATTA!!"

@app.route('/login', methods=['GET', 'POST'])
def login():
    #
    # LOGIN UTENTE
    #

    if request.method == 'GET':
        return flask.render_template('public_html/login.html')
    
    try:
        user = request.form['user']
        passwd = request.form['passwd']
        if user == "" or passwd == "":
            raise KeyError
    except KeyError:
        return flask.render_template('/public_html/login.html')

    return "LOGIN EFFETTUATO!!"
'''

@app.route('/exploits', methods=['GET'])
def exploits():
    #
    # PAGINA PER LA GESTIONE DEGLI EXPLOITS
    # DA QUI SI PUO' EFFETTUARE L'UPLOAD
    #
    global list_exploits

    db = db_utils.connect()

    for exploit in list_exploits:
        successi = db_utils.count_exploit_flags(db, exploit)
        exploit.add_successi(successi)

    db.close()    

    return flask.render_template('/public_html/upload.html', exploits=list_exploits)


@app.route('/exploits', methods=['POST'])
def upload():
    #
    # PAGINA PER LA GESTIONE DEGLI EXPLOITS
    # DA QUI SI PUO' EFFETTUARE L'UPLOAD
    #
    global list_exploits
    path = app.settings.configuration["attack"]["path"]
    
    try:
        os.mkdir(path)
    except FileExistsError:
        pass
    
    #cerco di prendermi il file uploadato
    try:
        f = flask.request.files['myFile']
    except ValueError:
        utils.log_err("POST REQUEST SENZA FILE\n")
        return redirect(flask.request.url)
    
    #controllo che non venga fatto un upload vuoto
    if f.filename == '':
        utils.log_err("EXPLOIT UPLOAD VUOTO\n")
        return redirect(flask.request.url)
    
    # Save the file
    filename = secure_filename(f.filename)
    file_path = os.path.join(path, filename)
    try:
        f.save(file_path)
    except IsADirectoryError:
        abort(400)
    
    subprocess.run("chmod +x "+file_path, shell=True)
    
    exp = Exploit(filename, app.settings, os.path.splitext(os.path.basename(filename))[0])
    list_exploits.append(exp)
    
    return flask.redirect(flask.request.url)


@app.route("/download/<f>")
def show(f):
    #
    # Mostra l'exploit richiesto
    #
    path = app.settings.configuration["attack"]["path"]
    filename = secure_filename(f)
    file = os.path.join(path, filename)
    
    try:
        return flask.send_file(file, mimetype='text/plain')
    except:
        flask.abort(404)


def init():
    settings = manager.test()
    return settings

if __name__ == '__main__':
    app.settings = init()
    app.run(debug=True)
