import db_utils


def api_get_targets(service, targets, thread_struct):
    db = db_utils.connect()
    data = db_utils.get_count_attacks_for_single_opponents(db)
    db.close()
    TOTAL, SERVICE, OPPONENT = 0, 1, 2
    response = {'targets': []}
    default_all = targets is None or len(targets) == 0
    try:
        for row in data:
            if row[SERVICE] == service and (default_all or row[OPPONENT] in targets):
                thread_status = thread_struct[row[SERVICE]][row[OPPONENT]].is_active()
                target_info = {"name": row[OPPONENT], "flag": row[TOTAL], "active": thread_status}
                response['targets'].append(target_info)
        return response
    except KeyError:
        return {"error": "Invalid parameters"}


def api_switch_state(service, targets, thread_struct):
    default_all = targets is None or len(targets) == 0
    try:
        service_threads = thread_struct[service]
        for opponent in service_threads:
            if default_all or opponent in targets:
                service_threads[opponent].switch_state()
        return {"result": "success"}
    except KeyError:
        return {"error": "Invalid parameters"}
