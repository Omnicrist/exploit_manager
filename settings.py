import utils
import db_utils


class Singleton(type):
    _instances = {}

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = \
                super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class Settings(metaclass=Singleton):
    __DB = "db"
    __DB_NAME = "name"
    __DB_EXTENSION = "extension"
    __DB_PATH = "path"
    __SUBMIT = "submit"
    __SUBMIT_URL = "url"
    __SUBMIT_TOKEN = "token"
    __SUBMIT_REGEX = "regex"
    __SUBMIT_PROTOCOL = "protocol"
    __MESSAGE = "message"
    __MESSAGE_IF_VALID = "valid"
    __MESSAGE_IF_INVALID = "invalid"
    __MESSAGE_IF_TOO_OLD = "too_old"
    __MESSAGE_IF_ALREADY_SUBMITTED = "already_submitted"
    __ATTACK = "attack"
    __ATTACK_OPPONENTS = "targets"
    __ATTACK_TICK = "tick"
    __THREAD = "thread"
    __THREAD_POOL = "pool"
    __THREAD_TIMEOUT = "timeout"

    def __init__(self, configuration_file: str):
        self.configuration_file = configuration_file
        utils.log_out(f"Loading {self.configuration_file}...")
        self.configuration = utils.read_configuration(self.configuration_file)
        utils.log_out(f"{self.configuration_file} successfully loaded!\n")
        self.__get_and_check_connection()
        self.__get_and_check_submit()
        self.__get_and_check_attack()
        self.__get_and_ckeck_thread()
        # TODO docker conf

    def __get_db(self) -> str:
        try:
            db = self.configuration[Settings.__DB]
            return db[Settings.__DB_PATH] + db[Settings.__DB_NAME] \
                   + db[Settings.__DB_EXTENSION]
        except KeyError as e:
            utils.log_err(
                f"could not get db infos from {self.configuration_file}\n{e}")
            utils.exit_failure_settings()

    def __get_and_check_connection(self) -> None:
        # Get phase
        db = self.__get_db()

        # Check phase
        utils.log_out(f"Checking if {db} exists...")
        if db_utils.check_if_db_exists():
            connection = db_utils.connect(db)
            utils.log_out(f"{db} found!\n")
            utils.log_out(f"Checking if flags table exists...")
            if db_utils.check_if_flags_table_exists(connection):
                utils.log_out("flags table found!\n")
            else:
                utils.log_warn(f"flags table not found!\n")
                utils.log_warn(f"Creating flags table...")
                db_utils.create_table_flags(connection)
                utils.log_warn(f"Successfully created flags table!\n")
        else:
            utils.log_warn(f"{db} not found!\n")
            utils.log_warn(f"Creating {db}...")
            connection = db_utils.connect(db)
            utils.log_warn(f"{db} created!\n")
            utils.log_warn(f"Creating flags table...")
            db_utils.create_table_flags(connection)
            utils.log_warn(f"Successfully created flags table!")
            utils.log_warn(f"Successfully created {db}!\n")

        connection.close()

        # Assign phase
        self.db = db

    def __get_messages(self) -> (str, str, str, str):
        try:
            utils.log_out(f"Reading {Settings.__MESSAGE} field "
                          f"in {self.configuration_file}...")
            msg = self.configuration[Settings.__MESSAGE]
            vld_msg = msg[Settings.__MESSAGE_IF_VALID]
            invld_msg = msg[Settings.__MESSAGE_IF_INVALID]
            too_old_msg = msg[Settings.__MESSAGE_IF_TOO_OLD]
            alrdy_sbmttd = msg[Settings.__MESSAGE_IF_ALREADY_SUBMITTED]
            utils.log_out(f"{Settings.__MESSAGE} found!\n")
            return vld_msg, invld_msg, too_old_msg, alrdy_sbmttd
        except KeyError as e:
            utils.log_err(
                f"could not get {Settings.__MESSAGE} infos from "
                f"{self.configuration_file}\n{e}")
            utils.exit_failure_settings()

    def __get_submit(self) -> (str, str, str, str):
        try:
            utils.log_out(f"Reading {Settings.__SUBMIT} field "
                          f"in {self.configuration_file}...")
            sbmt = self.configuration[Settings.__SUBMIT]
            url = sbmt[Settings.__SUBMIT_URL]
            tkn = sbmt[Settings.__SUBMIT_TOKEN]
            rgx = sbmt[Settings.__SUBMIT_REGEX]
            prtcl = sbmt[Settings.__SUBMIT_PROTOCOL]
            utils.log_out(f"{Settings.__SUBMIT} found!\n")
            return url, tkn, rgx, prtcl
        except KeyError as e:
            utils.log_err(
                f"could not get {Settings.__SUBMIT} infos from "
                f"{self.configuration_file}\n{e}")
            utils.exit_failure_settings()

    def __get_and_check_submit(self) -> None:
        # Get Phase
        _url, tkn, rgx, prtcl = self.__get_submit()
        vld, invld, too_old, alrdy_sbmttd = self.__get_messages()

        # Check Phase
        protocol = utils.check(utils.check_protocol,
                               prtcl, Settings.__SUBMIT_PROTOCOL)
        if protocol != "TCP":
            url = utils.check(utils.check_url, _url, Settings.__SUBMIT_URL)
        else:
            url = _url
        regex = utils.check(utils.check_regex, rgx, Settings.__SUBMIT_REGEX)


        # Assign Phase
        self.submit_url = url
        self.submit_token = tkn
        self.submit_regex = regex
        self.submit_protocol = protocol
        self.valid_flag_message = vld
        self.invalid_flag_message = invld
        self.too_old_flag_message = too_old
        self.already_submitted_flag_message = alrdy_sbmttd

    def __get_attack(self) -> (dict, str):
        try:
            utils.log_out(f"Reading {Settings.__ATTACK} field "
                          f"in {self.configuration_file}...")
            atk = self.configuration[Settings.__ATTACK]
            opnts = atk[Settings.__ATTACK_OPPONENTS]
            tick = str(atk[Settings.__ATTACK_TICK])
            utils.log_out(f"{Settings.__ATTACK} found!\n")
            return opnts, tick
        except KeyError as e:
            utils.log_err(
                f"could not get {Settings.__ATTACK} infos from "
                f"{self.configuration_file}\n{e}")
            utils.exit_failure_settings()

    def __get_and_check_attack(self):
        # Get Phase
        opnts, tck = self.__get_attack()

        # Check Phase
        opponents = utils.check(utils.check_ips, opnts,
                                Settings.__ATTACK_OPPONENTS)
        tick = utils.check(utils.check_integer_from_str, tck,
                                Settings.__ATTACK_TICK)

        # Assign phase
        self.opponents = opponents
        self.tick = tick

    def __get_thread(self) -> (str, str):
        try:
            thread = self.configuration[Settings.__THREAD]
            pool = str(thread[Settings.__THREAD_POOL])
            tmt = str(thread[Settings.__THREAD_TIMEOUT])
            return pool, tmt
        except KeyError as e:
            utils.log_err(
                f"could not get {Settings.__THREAD} infos from "
                f"{self.configuration_file}\n{e}")
            utils.exit_failure_settings()

    def __get_and_ckeck_thread(self):
        # Get Phase
        utils.log_out(f"Reading {Settings.__THREAD} field..."
                      f"in {self.configuration_file}...")
        pl, tmt = self.__get_thread()
        utils.log_out(f"{Settings.__THREAD} found!\n")

        # Check Phase
        pool = utils.check(utils.check_integer_from_str, pl,
                                Settings.__THREAD_POOL)
        timeout = utils.check(utils.check_integer_from_str, tmt,
                                Settings.__THREAD_TIMEOUT)

        # Assign phase
        self.thread_pool = pool
        self.thread_timeout = timeout