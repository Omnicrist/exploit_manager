from settings import Settings
import util_marshal
from attacker import Attacker
import json
import time
import importlib


def import_modules(settings, caller_globals):
    modules_list = settings['exploit_modules']
    for module in modules_list:
        caller_globals[module] = importlib.import_module(module)


def run_exploits(exploit_in, settings, caller_globals):
    exploit_in = util_marshal.unserialize_exploit(exploit_in, caller_globals)
    # TODO: return list of attackers spawned, to make possible to stop them later, building something like an index
    #  of the attacks with their attributes
    for opponent in exploit_in['opponents']:
        attacker = Attacker(settings, opponent, exploit_in['service'], exploit_in['exploit'])
        attacker.start()


def load_setup(caller_globals):
    settings = Settings("./conf.json")
    import_modules(settings.configuration, caller_globals)
    return settings


if __name__ == '__main__':
    settings = load_setup(globals())
    print(globals())
    with open('exploit.JSON', 'r') as f:
        exploit = json.load(f)
    run_exploits(exploit, settings, globals())
    time.sleep(60)
