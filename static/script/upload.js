/*eslint-env es6*/
/*global document*/
/*global window*/
/*global FileReader*/
/*global setTimeout*/

document.querySelectorAll('.drop-zone__input').forEach(inputElement => {
    const dropZoneElement = inputElement.closest('.drop-zone');
    let promptElement = dropZoneElement.querySelector(".drop-zone__prompt");

    if (promptElement) {
        promptElement.addEventListener("click", () => {
            inputElement.click();
        });
    }
    
    inputElement.addEventListener("change", () => {
        updateThumbnail(dropZoneElement, inputElement, inputElement.files[0]);
    });
    
    dropZoneElement.addEventListener("dragover", e => {
        e.preventDefault();
        dropZoneElement.classList.add("drop-zone--over");
    });
    
    ["dragleave", "dragend"].forEach(type => {
        dropZoneElement.addEventListener(type, () =>{
            dropZoneElement.classList.remove("drop-zone--over");
        });
    });
    
    dropZoneElement.addEventListener("drop", e => {
        e.preventDefault();
        
        if (e.dataTransfer.files.length) {
            inputElement.files = e.dataTransfer.files;
            updateThumbnail(dropZoneElement, inputElement, e.dataTransfer.files[0]);
        }
        
        dropZoneElement.classList.remove("drop-zone--over");
    });
});

/*
*Aggiorna la thumbnail quando viene rilasciato un elemento sulla drop zone
*
*@param {HTMLElement} dropZoneElement
*@param {File} file
*/

function updateThumbnail(dropZoneElement, inputElement, file) {
    if (window.confirm('Sicuro di voler uploadare il file "' + file.name + '"?')) {
        let thumbnailElement = dropZoneElement.querySelector(".drop-zone__thumb");
    
        //Tolgo il prompt se presente
        if (dropZoneElement.querySelector(".drop-zone__prompt")) {
            dropZoneElement.querySelector(".drop-zone__prompt").remove();
        }
    
        //Se Ã¨ la prima volta che eseguo la funzione devo crearla
        if (!thumbnailElement) {
            thumbnailElement = document.createElement("div");
            thumbnailElement.classList.add("drop-zone__thumb");
            dropZoneElement.appendChild(thumbnailElement);

            thumbnailElement.addEventListener("click", () => {
                inputElement.click();
            });
        }
    
        thumbnailElement.dataset.label = file.name;
    
        if (file.type.startsWith("image/")) {
            const reader = new FileReader();
        
            reader.readAsDataURL(file);
            reader.onload = () => {
                thumbnailElement.style.backgroundImage = `url('${ reader.result }')`;
            };
        } else {
            thumbnailElement.style.backgroundImage = null;
        }
    }
}

function AutoRefresh(t) {
    getExploitsData();
}

AutoRefresh(120000);


function getExploitsData() {
    var xhr = new XMLHttpRequest();

    xhr.onload = () => {
        var data = JSON.parse(xhr.responseText);
        var services = data.services;
        var totals = data.totals;

        var area = document.getElementById("exploits_area");
        area.innerHTML = "";

        var i;
        for (i=0; i<services.length; i++) {
            var exploit = document.createElement('span');
            exploit.classList.add("exploit");

            var title = document.createElement('span');
            title.classList.add('exploit-title');
            title.innerHTML = "<p>" + services[i].service + "</p>";
            exploit.appendChild(title);

            var successi = document.createElement('span');
            successi.classList.add('exploit-successi');
            successi.innerHTML = "<p>" + totals[services[i].service] + "</p>";
            exploit.appendChild(successi);

            var fallimenti = document.createElement('span');
            fallimenti.classList.add('exploit-fallimenti');
            fallimenti.innerHTML = "<p>" + "0" + "</p>";
            exploit.appendChild(fallimenti);

            var espandi = document.createElement('span');
            espandi.classList.add('exploit-espandi');
            espandi.innerHTML = "<p>" + "ESPANDI" + "</p>";
            exploit.appendChild(espandi);
            espandi.onclick = () => {
                expandExploit(espandi.parentElement)
            }

            area.appendChild(exploit);
        }
    }

    xhr.open("GET", "/api/getExploits", true);
    xhr.send(null);
}


function fixedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16);
    });
  }
  


function expandExploit(exploit_box) {
    if (exploit_box.lastChild.id === "exploit-targets") {
        exploit_box.removeChild(exploit_box.lastChild);
    }
    else {
        var service = exploit_box.children[0].innerText;

        var url = "/api/getTargets?service=" + fixedEncodeURIComponent(service);

        var xhr = new XMLHttpRequest();
        xhr.onload = () => {
            var targets_data = JSON.parse(xhr.responseText).targets;    

            var table = document.createElement('table');
            table.id = "exploit-targets";

            var i;
            for (i = 0; i<targets_data.length; i++) {
                var target = table.insertRow(i);

                var control = target.insertCell(0);
                var name = target.insertCell(1);
                var flag = target.insertCell(2);

                if (targets_data[i].active === 1) {
                    control.innerHTML = '<i class="fas fa-pause-circle"></i>';
                }
                else {
                    control.innerHTML = '<i class="fas fa-play-circle"></i>';
                }
                name.innerHTML = targets_data[i].name;
                flag.innerHTML = targets_data[i].flag;
            }

            exploit_box.appendChild(table);
        }

        xhr.open("GET", url, true);
        xhr.send(null);
    }
}