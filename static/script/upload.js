/*eslint-env es6*/
/*global document*/
/*global window*/
/*global FileReader*/
/*global setTimeout*/

document.querySelectorAll('.drop-zone__input').forEach(inputElement => {
    const dropZoneElement = inputElement.closest('.drop-zone');
    let promptElement = dropZoneElement.querySelector(".drop-zone__prompt");

    if (promptElement) {
        promptElement.addEventListener("click", () => {
            inputElement.click();
        });
    }
    
    inputElement.addEventListener("change", () => {
        updateThumbnail(dropZoneElement, inputElement, inputElement.files[0]);
    });
    
    dropZoneElement.addEventListener("dragover", e => {
        e.preventDefault();
        dropZoneElement.classList.add("drop-zone--over");
    });
    
    ["dragleave", "dragend"].forEach(type => {
        dropZoneElement.addEventListener(type, () =>{
            dropZoneElement.classList.remove("drop-zone--over");
        });
    });
    
    dropZoneElement.addEventListener("drop", e => {
        e.preventDefault();
        
        if (e.dataTransfer.files.length) {
            inputElement.files = e.dataTransfer.files;
            updateThumbnail(dropZoneElement, inputElement, e.dataTransfer.files[0]);
        }
        
        dropZoneElement.classList.remove("drop-zone--over");
    });
});

/*
*Aggiorna la thumbnail quando viene rilasciato un elemento sulla drop zone
*
*@param {HTMLElement} dropZoneElement
*@param {File} file
*/

function updateThumbnail(dropZoneElement, inputElement, file) {
    if (window.confirm('Sicuro di voler uploadare il file "' + file.name + '"?')) {
        let thumbnailElement = dropZoneElement.querySelector(".drop-zone__thumb");
    
        //Tolgo il prompt se presente
        if (dropZoneElement.querySelector(".drop-zone__prompt")) {
            dropZoneElement.querySelector(".drop-zone__prompt").remove();
        }
    
        //Se Ã¨ la prima volta che eseguo la funzione devo crearla
        if (!thumbnailElement) {
            thumbnailElement = document.createElement("div");
            thumbnailElement.classList.add("drop-zone__thumb");
            dropZoneElement.appendChild(thumbnailElement);

            thumbnailElement.addEventListener("click", () => {
                inputElement.click();
            });
        }
    
        thumbnailElement.dataset.label = file.name;
    
        if (file.type.startsWith("image/")) {
            const reader = new FileReader();
        
            reader.readAsDataURL(file);
            reader.onload = () => {
                thumbnailElement.style.backgroundImage = `url('${ reader.result }')`;
            };
        } else {
            thumbnailElement.style.backgroundImage = null;
        }
    }
}


function getExploitsData() {
    var xhr = new XMLHttpRequest();

    xhr.onload = () => {
        var data = JSON.parse(xhr.responseText);
        var services = data.services;
        var totals = data.totals;
        var status = data.status;

        var area = document.getElementById("exploits-area");
        area.innerHTML = "";

        var i;
        for (i=0; i<services.length; i++) {
            var external_box = document.createElement('span');
            external_box.classList.add('exploit-external-box');
            external_box.id = "exploit-external-box-" + i.toString();
            var exploit = document.createElement('span');
            exploit.classList.add("exploit");

            var title = document.createElement('span');
            title.classList.add('exploit-title');
            title.innerHTML = "<p>" + services[i] + "</p>";
            exploit.appendChild(title);

            var successi = document.createElement('span');
            successi.classList.add('exploit-successi');
            successi.innerHTML = "<p>" + totals[services[i]] + "</p>";
            exploit.appendChild(successi);

            var control = document.createElement('span');
            control.classList.add('exploit-control');
            if (status[i] === 0) {
                external_box.classList.add('exploit-old');
                control.innerHTML = '<i class="fas fa-hand-paper"></i>';
            }
            else {
                control.innerHTML = '<i onclick="swapExploitState(' + i + ', \'play\');" class="fas fa-play-circle"></i><i onclick="swapExploitState(' + i + ', \'pause\');" class="fas fa-pause-circle"></i>';
            }
            exploit.appendChild(control);

            var espandi = document.createElement('span');
            espandi.classList.add('exploit-espandi');
            espandi.innerHTML = "<p>" + "ESPANDI" + "</p>";
            exploit.appendChild(espandi);
            espandi.setAttribute("onclick", "expandExploit(" + i.toString() + ");");
            

            external_box.appendChild(exploit);
            area.appendChild(external_box);
        }
    }

    xhr.open("GET", "/api/getExploits", true);
    xhr.send(null);
}


function fixedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
      return '%' + c.charCodeAt(0).toString(16);
    });
  }
  


function expandExploit(exploit_external_box_id) {
    var exploit_external_box = document.getElementById("exploit-external-box-" + exploit_external_box_id.toString());
    if (exploit_external_box.lastChild.id === "exploit-targets") {
        exploit_external_box.removeChild(exploit_external_box.lastChild);
    }
    else {
        var service = exploit_external_box.children[0].children[0].innerText;

        var url = "/api/getTargets?service=" + fixedEncodeURIComponent(service);

        var xhr = new XMLHttpRequest();
        xhr.onload = () => {
            var targets_data = JSON.parse(xhr.responseText).targets;    

            var table = document.createElement('table');
            table.id = "exploit-targets";
            table.classList.add("exploit-targets");

            var total = 0;
            var i;
            for (i = 0; i<targets_data.length; i++) {
                var target = table.insertRow(i);

                var control = target.insertCell(0);
                var name = target.insertCell(1);
                var flag = target.insertCell(2);

                var pause_image = '<i id="pause" class="fas fa-pause-circle"></i>';
                var play_image = '<i id="play" class="fas fa-play-circle"></i>';
                var stop_image = '<i id="stop" class="fas fa-hand-paper"></i>';

                if (exploit_external_box.classList.contains("exploit-old")) {
                    control.innerHTML = stop_image;
                }
                else {
                    control.setAttribute("onclick", "swapTargetState('" + exploit_external_box_id + "', ['" + targets_data[i].name + "']);");
                    if (targets_data[i].active === 1) {
                        control.innerHTML = pause_image;
                    }
                    else {
                        control.innerHTML = play_image;
                    }
                }
                
                name.innerHTML = targets_data[i].name;
                flag.innerHTML = targets_data[i].flag;
                total += targets_data[i].flag;
            }
            exploit_external_box.children[0].children[1].innerHTML = "<p>" + total + "</p>";
            exploit_external_box.appendChild(table);
        }

        xhr.open("GET", url, true);
        xhr.send(null);
    }
}


function swapTargetState(service_id, targets) {
    var xhr = new XMLHttpRequest();
    
    var service = document.getElementById("exploit-external-box-" + service_id.toString()).children[0].children[0].innerText;

    var url = "/api/swapState?service=" + fixedEncodeURIComponent(service);

    var i;
    for (i=0;i<targets.length;i++) {
        url += "&targets=" + fixedEncodeURIComponent(targets[i]);
    }

    xhr.onload = () => {
        response = JSON.parse(xhr.responseText);
        console.log(response);
        updateTargets(service_id);
    }

    xhr.open("GET", url, true);
    xhr.send(null);
}


function swapExploitState(service_id, action) {
    var xhr = new XMLHttpRequest();

    var exploit_external_box = document.getElementById("exploit-external-box-" + service_id.toString());

    var url = "/api/swapState?service=" + fixedEncodeURIComponent(exploit_external_box.children[0].children[0].innerText);

    if (exploit_external_box.lastChild.id != "exploit-targets") {
        expandExploit(service_id);
        return null;
    }

    exploit_external_box = document.getElementById("exploit-external-box-" + service_id.toString());

    var count = 0;
    var i;
    for (i=0; i<exploit_external_box.lastChild.rows.length; i++) {
        console.log(exploit_external_box.lastChild.rows[i].children[0].children[0].id == action);
        if (exploit_external_box.lastChild.rows[i].children[0].children[0].id == action) {
            url += "&targets=" + fixedEncodeURIComponent(exploit_external_box.lastChild.rows[i].children[1].innerText);
            count += 1;
        }
    }

    if (count === 0) {
        return null;
    }
    else if (count === exploit_external_box.lastChild.rows.length) {
        url = url.substring(0, url.indexOf("&"));
    }

    xhr.onload = () => {
        response = JSON.parse(xhr.responseText);
        console.log(response);
        updateTargets(service_id);
    }

    xhr.open("GET", url, true);
    xhr.send(null);
}


function updateTargets(service_id) {
    var exploit_external_box = document.getElementById("exploit-external-box-" + service_id.toString());

    if (exploit_external_box.lastChild.id === "exploit-targets") {
        expandExploit(service_id);
    }
    expandExploit(service_id);
}